name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GEN_RELEASE_NOTE_TOKEN }}  # Use custom token
      run: |
        gh auth login --with-token < <(echo "$GH_TOKEN")

    - name: Extract commit messages from the PR
      id: extract-commits
      env:
        GH_TOKEN: ${{ secrets.GEN_RELEASE_NOTE_TOKEN }}  # Use custom token
      run: |
        # Get the commit messages from the PR
        PR_NUMBER=${{ github.event.pull_request.number }}
        COMMIT_MESSAGES=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].message')

        # Format commit messages as a list
        COMMIT_MESSAGES=$(echo "$COMMIT_MESSAGES" | sed 's/^/- /')

        # Replace newlines with <br> tags
        COMMIT_MESSAGES="${COMMIT_MESSAGES//$'\n'/'<br>'}"

        # Set the output
        echo "COMMIT_MESSAGES=${COMMIT_MESSAGES}" >> $GITHUB_OUTPUT

    - name: Determine version number
      id: version
      run: |
        # Logic to determine the next version number
        # Check if any tags exist
        if git describe --tags --abbrev=0 &> /dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          NEW_VERSION=$(echo $LAST_TAG | awk -F. '{printf("%d.%d.%d", $1, $2, $3+1)}')
        else
          # If no tags exist, start with v1.0.0
          NEW_VERSION="1.0.0"
        fi
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Populate release note template
      id: populate-template
      run: |
        # Read the template file
        TEMPLATE=$(cat .github/workflows/release-note-template.md)

        # Replace placeholders with actual values
        RELEASE_BODY="${TEMPLATE//'{{ version }}'/${{ steps.version.outputs.NEW_VERSION }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ commit_messages }}'/${{ steps.extract-commits.outputs.COMMIT_MESSAGES }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ date }}'/$(date -u +'%Y-%m-%d %H:%M:%S')}"

        # Set the output using EOF syntax for multi-line content
        echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
        echo "${RELEASE_BODY}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GEN_RELEASE_NOTE_TOKEN }}  # Use custom token
      with:
        tag_name: v${{ steps.version.outputs.NEW_VERSION }}
        release_name: Release v${{ steps.version.outputs.NEW_VERSION }}
        body: ${{ steps.populate-template.outputs.RELEASE_BODY }}
        draft: false
        prerelease: false
