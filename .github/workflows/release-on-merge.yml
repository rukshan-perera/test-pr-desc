name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Debug PR Number
      run: |
        echo "PR Number: ${{ github.event.pull_request.number }}"
        - name: Extract and categorize commit messages from the PR
      id: extract-commits
      env:
        GH_TOKEN: ${{ secrets.GEN_RELEASE_NOTE_TOKEN }}  # Use custom token
      run: |
        # Get the commit messages from the PR
        PR_NUMBER=${{ github.event.pull_request.number }}
        PR_AUTHOR=${{ github.event.pull_request.user.login }}
        echo "Fetching commit messages for PR #$PR_NUMBER by @$PR_AUTHOR"

        # Debug: Print raw output of gh pr view
        RAW_OUTPUT=$(gh pr view $PR_NUMBER --json commits)
        echo "Raw output of gh pr view:"
        echo "$RAW_OUTPUT"

        # Extract commit messages and format them with author and PR number
        COMMIT_MESSAGES=$(echo "$RAW_OUTPUT" | jq -r '.commits[] | "\(.messageHeadline) by @'"$PR_AUTHOR"' in #'"$PR_NUMBER"'"')

        # Debug: Print formatted commit messages
        echo "Formatted Commit Messages:"
        echo "$COMMIT_MESSAGES"

        # Categorize commit messages
        FEATURES=$(echo "$COMMIT_MESSAGES" | grep -i "feat")
        FIXES=$(echo "$COMMIT_MESSAGES" | grep -i "fix")
        OTHER=$(echo "$COMMIT_MESSAGES" | grep -iv -e "feat" -e "fix")

        # Debug: Print categorized commit messages
        echo "Features:"
        echo "$FEATURES"
        echo "Fixes:"
        echo "$FIXES"
        echo "Other Changes:"
        echo "$OTHER"

        # Format commit messages as lists
        FEATURES=$(echo "$FEATURES" | sed 's/^/- /')
        FIXES=$(echo "$FIXES" | sed 's/^/- /')
        OTHER=$(echo "$OTHER" | sed 's/^/- /')

        # Replace newlines with <br> tags
        FEATURES="${FEATURES//$'\n'/'<br>'}"
        FIXES="${FIXES//$'\n'/'<br>'}"
        OTHER="${OTHER//$'\n'/'<br>'}"

        # Set the outputs
        echo "FEATURES=${FEATURES}" >> $GITHUB_OUTPUT
        echo "FIXES=${FIXES}" >> $GITHUB_OUTPUT
        echo "OTHER=${OTHER}" >> $GITHUB_OUTPUT
    - name: Determine version number
      id: version
      run: |
        # Logic to determine the next version number
        # Check if any tags exist
        if git describe --tags --abbrev=0 &> /dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          NEW_VERSION=$(echo $LAST_TAG | awk -F. '{printf("%d.%d.%d", $1, $2, $3+1)}')
        else
          # If no tags exist, start with v1.0.0
          NEW_VERSION="1.0.0"
        fi
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
    - name: Populate release note template
      id: populate-template
      run: |
        # Read the template file
        TEMPLATE=$(cat .github/workflows/release-note-template.md)

        # Calculate counts
        FEATURES_COUNT=$(echo "${{ steps.extract-commits.outputs.FEATURES }}" | grep -c '^-')
        FIXES_COUNT=$(echo "${{ steps.extract-commits.outputs.FIXES }}" | grep -c '^-')
        OTHER_COUNT=$(echo "${{ steps.extract-commits.outputs.OTHER }}" | grep -c '^-')

        # Replace placeholders with actual values
        RELEASE_BODY="${TEMPLATE//'{{ version }}'/${{ steps.version.outputs.NEW_VERSION }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ features }}'/${{ steps.extract-commits.outputs.FEATURES }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ fixes }}'/${{ steps.extract-commits.outputs.FIXES }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ other }}'/${{ steps.extract-commits.outputs.OTHER }}}"
        RELEASE_BODY="${RELEASE_BODY//'{{ features_count }}'/$FEATURES_COUNT}"
        RELEASE_BODY="${RELEASE_BODY//'{{ fixes_count }}'/$FIXES_COUNT}"
        RELEASE_BODY="${RELEASE_BODY//'{{ other_count }}'/$OTHER_COUNT}"
        RELEASE_BODY="${RELEASE_BODY//'{{ date }}'/$(date -u +'%Y-%m-%d %H:%M:%S')}"

        # Set the output using EOF syntax for multi-line content
        echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
        echo "${RELEASE_BODY}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GEN_RELEASE_NOTE_TOKEN }}  # Use custom token
      with:
        tag_name: v${{ steps.version.outputs.NEW_VERSION }}
        release_name: Release v${{ steps.version.outputs.NEW_VERSION }}
        body: ${{ steps.populate-template.outputs.RELEASE_BODY }}
        draft: false
        prerelease: false
