name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Extract commit messages
      id: extract-commits
      run: |
        # Fetch the latest changes from origin
        git fetch origin main

        # Get the commit messages between the base branch (main) and the PR head
        COMMIT_MESSAGES=$(git log --pretty=format:"- %s" origin/main..HEAD)

        # Escape newlines and special characters for GitHub Actions output
        COMMIT_MESSAGES="${COMMIT_MESSAGES//'%'/'%25'}"
        COMMIT_MESSAGES="${COMMIT_MESSAGES//$'\n'/'%0A'}"
        COMMIT_MESSAGES="${COMMIT_MESSAGES//$'\r'/'%0D'}"

        # Set the output
        echo "COMMIT_MESSAGES=${COMMIT_MESSAGES}" >> $GITHUB_OUTPUT

    - name: Determine version number
      id: version
      run: |
        # Logic to determine the next version number
        # For example, you could use the last tag and increment it
        LAST_TAG=$(git describe --tags --abbrev=0)
        NEW_VERSION=$(echo $LAST_TAG | awk -F. '{printf("%d.%d.%d", $1, $2, $3+1)}')
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ steps.version.outputs.NEW_VERSION }}
        release_name: Release v${{ steps.version.outputs.NEW_VERSION }}
        body: |
          ${{ steps.extract-commits.outputs.COMMIT_MESSAGES }}
        draft: false
        prerelease: false
